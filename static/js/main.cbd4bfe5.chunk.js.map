{"version":3,"sources":["Components/Socials.js","Components/Button.js","Components/Footer.js","Components/Text.js","functions.js","Store/quoteContainerSlice.js","Components/Logic.js","Components/UseQuoteContainer.js","Components/QuoteContainer.js","App.js","Store/index.js","index.js"],"names":["Socials","currentColor","className","id","href","style","backgroundColor","icon","faTwitter","faTumblr","Button","newQuoteHandler","quotes","text","author","dispatch","onClick","Footer","Text","currentQuote","currentAuthor","color","ref","faQuoteLeft","arrayOfColors","getQuoteAndAuthor","data","Math","floor","random","length","getRandomColor","getData","createAsyncThunk","getState","a","fetch","then","res","json","initialQuoteContainerState","status","quoteContainerSlice","createSlice","name","initialState","reducers","pushToQuotes","state","action","push","setCurrentQuoteAndAuthor","payload","quote","extraReducers","pending","fulfilled","b","quoteAndAuthor","rejected","quoteContainerActions","actions","current","opacity","transition","setTimeout","UseQuoteContainer","useRef","useDispatch","useSelector","quoteContainer","useEffect","error","QuoteContainer","App","store","configureStore","reducer","quoteContainerReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbd4bfe5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { faTwitter, faTumblr } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Socials = ({ currentColor }) => {\r\n  return (\r\n    <div className=\"socials\">\r\n      <a\r\n        id=\"tweet-quote\"\r\n        href=\"https://twitter.com/intent/tweet\"\r\n        style={{ backgroundColor: currentColor }}\r\n      >\r\n        <FontAwesomeIcon className=\"socialIcon\" icon={faTwitter} />\r\n      </a>\r\n      <a\r\n        href=\"https://www.tumblr.com/widgets/share/tool\"\r\n        id=\"tumbler-quote\"\r\n        style={{ backgroundColor: currentColor }}\r\n      >\r\n        <FontAwesomeIcon className=\"socialIcon\" icon={faTumblr} />\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Socials;\r\n","import React from \"react\";\r\n\r\nconst Button = ({\r\n  newQuoteHandler,\r\n  quotes,\r\n  text,\r\n  author,\r\n  dispatch,\r\n  currentColor,\r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={() => newQuoteHandler(quotes, text, author, dispatch)}\r\n      id=\"new-quote\"\r\n      style={{ backgroundColor: currentColor }}\r\n    >\r\n      New quote\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Socials from \"./Socials\";\r\nimport Button from \"./Button\";\r\n\r\nconst Footer = ({\r\n  currentColor,\r\n  newQuoteHandler,\r\n  quotes,\r\n  text,\r\n  author,\r\n  dispatch,\r\n}) => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <Socials currentColor={currentColor} />\r\n      <Button\r\n        newQuoteHandler={newQuoteHandler}\r\n        quotes={quotes}\r\n        text={text}\r\n        author={author}\r\n        dispatch={dispatch}\r\n        currentColor={currentColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Text = ({ currentColor, text, currentQuote, author, currentAuthor }) => {\r\n  return (\r\n    <>\r\n      <div id=\"text\" style={{ color: currentColor }} ref={text}>\r\n        <FontAwesomeIcon className=\"quote-left\" icon={faQuoteLeft} />\r\n        <q>{currentQuote}</q>\r\n      </div>\r\n      <p id=\"author\" style={{ color: currentColor }} ref={author}>\r\n        - {currentAuthor}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Text;\r\n","export const arrayOfColors = [\r\n  \"#16a085\",\r\n  \"#27ae60\",\r\n  \"#2c3e50\",\r\n  \"#f39c12\",\r\n  \"#e74c3c\",\r\n  \"#9b59b6\",\r\n  \"#FB6964\",\r\n  \"#342224\",\r\n  \"#472E32\",\r\n  \"#BDBB99\",\r\n  \"#77B1A9\",\r\n  \"#73A857\",\r\n];\r\n\r\nexport const getQuoteAndAuthor = (data) => {\r\n  let getRandomNumber = () => {\r\n    return Math.floor(Math.random() * data.length);\r\n  };\r\n  let activeQuote = data[getRandomNumber()];\r\n  return activeQuote;\r\n};\r\n\r\nexport const getRandomNumber = (data) => {\r\n  return Math.floor(Math.random() * data.length);\r\n};\r\n\r\nexport const getRandomColor = () => {\r\n  const newColor = arrayOfColors[getRandomNumber(arrayOfColors)];\r\n  return newColor;\r\n};\r\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { getQuoteAndAuthor } from \"../functions\";\r\nimport { getRandomColor } from \"../functions\";\r\n\r\nconst data =\r\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n\r\nexport const getData = createAsyncThunk(\r\n  \"data/getData\",\r\n  async (dispatch, getState) => {\r\n    return await fetch(data).then((res) => res.json());\r\n  }\r\n);\r\n\r\nconst initialQuoteContainerState = {\r\n  quotes: [],\r\n  currentColor: getRandomColor(),\r\n  status: null,\r\n  currentQuote: \"\",\r\n  currentAuthor: \"\",\r\n};\r\n\r\nconst quoteContainerSlice = createSlice({\r\n  name: \"quoteContainer\",\r\n  initialState: initialQuoteContainerState,\r\n  reducers: {\r\n    pushToQuotes(state, action) {\r\n      state.quotes.push(action);\r\n    },\r\n    setCurrentQuoteAndAuthor(state, action) {\r\n      state.currentQuote = action.payload.quote;\r\n      state.currentAuthor = action.payload.author;\r\n      state.currentColor = getRandomColor();\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getData.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getData.fulfilled]: (state, action) => {\r\n      state.status = \"success\";\r\n      let data = action.payload;\r\n      for (let a in data) {\r\n        for (let b in data[a]) {\r\n          state.quotes.push(data[a][b]);\r\n        }\r\n      }\r\n      let quoteAndAuthor = getQuoteAndAuthor(state.quotes);\r\n      state.currentQuote = quoteAndAuthor.quote;\r\n      state.currentAuthor = quoteAndAuthor.author;\r\n    },\r\n    [getData.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const quoteContainerActions = quoteContainerSlice.actions;\r\n\r\nexport default quoteContainerSlice.reducer;\r\n","import { quoteContainerActions } from \"../Store/quoteContainerSlice\";\r\nimport { getQuoteAndAuthor } from \"../functions\";\r\n\r\nexport const newQuoteHandler = (quotes, text, author, dispatch) => {\r\n  dispatch(\r\n    quoteContainerActions.setCurrentQuoteAndAuthor(getQuoteAndAuthor(quotes))\r\n  );\r\n  text.current.style.opacity = \"0\";\r\n  text.current.style.transition = \"opacity 0s\";\r\n  author.current.style.opacity = \"0\";\r\n  author.current.style.transition = \"opacity 0s\";\r\n  setTimeout(() => {\r\n    text.current.style.opacity = \"1\";\r\n    text.current.style.transition = \"opacity 2s\";\r\n    author.current.style.opacity = \"1\";\r\n    author.current.style.transition = \"opacity 2s\";\r\n  }, 0);\r\n};\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { getData } from \"../Store/quoteContainerSlice\";\r\n\r\nconst UseQuoteContainer = () => {\r\n  const text = useRef(null);\r\n  const author = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const quotes = useSelector((state) => state.quoteContainer.quotes);\r\n  const currentColor = useSelector(\r\n    (state) => state.quoteContainer.currentColor\r\n  );\r\n  const currentQuote = useSelector(\r\n    (state) => state.quoteContainer.currentQuote\r\n  );\r\n  const currentAuthor = useSelector(\r\n    (state) => state.quoteContainer.currentAuthor\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getData());\r\n    try {\r\n      text.current.style.opacity = \"1\";\r\n      text.current.style.transition = \"opacity 1s\";\r\n    } catch (error) {}\r\n  }, [dispatch]);\r\n\r\n  return {\r\n    text,\r\n    author,\r\n    quotes,\r\n    currentColor,\r\n    currentQuote,\r\n    currentAuthor,\r\n    dispatch,\r\n  };\r\n};\r\n\r\nexport default UseQuoteContainer;\r\n","import React from \"react\";\r\nimport \"./quoteContainer.css\";\r\nimport Footer from \"./Footer\";\r\nimport Text from \"./Text\";\r\nimport { newQuoteHandler } from \"./Logic\";\r\nimport UseQuoteContainer from \"./UseQuoteContainer\";\r\n\r\nconst QuoteContainer = () => {\r\n  const {\r\n    text,\r\n    author,\r\n    quotes,\r\n    currentColor,\r\n    currentQuote,\r\n    currentAuthor,\r\n    dispatch,\r\n  } = UseQuoteContainer();\r\n\r\n  return (\r\n    <article id=\"quote-box\">\r\n      <Text\r\n        currentColor={currentColor}\r\n        text={text}\r\n        currentQuote={currentQuote}\r\n        author={author}\r\n        currentAuthor={currentAuthor}\r\n      />\r\n      <Footer\r\n        text={text}\r\n        author={author}\r\n        quotes={quotes}\r\n        currentColor={currentColor}\r\n        newQuoteHandler={newQuoteHandler}\r\n        dispatch={dispatch}\r\n      />\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default QuoteContainer;\r\n","import QuoteContainer from \"./Components/QuoteContainer\";\nimport { useSelector } from \"react-redux\";\n\nfunction App() {\n  const currentColor = useSelector(\n    (state) => state.quoteContainer.currentColor\n  );\n\n  return (\n    <main style={{ backgroundColor: currentColor }}>\n      <QuoteContainer />\n    </main>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport quoteContainerReducer from \"./quoteContainerSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: { quoteContainer: quoteContainerReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/index\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}